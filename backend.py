# backend.py

import os
import io
import re
import time
import subprocess
import sys
import pandas as pd
import numpy as np
from datetime import datetime
from astrapy import DataAPIClient
import google.generativeai as genai

# Constants
VECTOR_DIMENSION = 512
COLLECTION_NAME = "chat_sessions"
PLOTS_DIR = "/home/user/gen-ai/plots"

# Initialize Clients
def initialize_clients(api_key, astra_token=None, astra_endpoint=None):
    """
    Initializes the Gemini AI model and Astra DB clients.
    """
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.0-flash')
    except Exception as e:
        print(f"❌ Error initializing Gemini AI: {e}")
        return None, None, None

    astra_client = None
    db = None

    if astra_token and astra_endpoint:
        try:
            astra_client = DataAPIClient(astra_token)
            db = astra_client.get_database_by_api_endpoint(astra_endpoint)
        except Exception as e:
            print(f"❌ Error initializing Astra DB client: {e}")

    return model, astra_client, db

# Load CSV Data
def load_data(file):
    """
    Loads a CSV dataset into a pandas DataFrame.
    """
    try:
        data = pd.read_csv(file)
        data.columns = data.columns.str.strip()  # Clean column names
        return data
    except pd.errors.EmptyDataError:
        print("❌ Error: CSV file is empty.")
        return None
    except pd.errors.ParserError:
        print("❌ Error: Invalid CSV format.")
        return None
    except Exception as e:
        print(f"❌ Error loading dataset: {e}")
        return None

# Clean AI-Generated Code
def clean_code(code):
    """
    Cleans the AI-generated code by:
    - Removing markdown-style code blocks (```python)
    - Stripping unnecessary spaces
    """
    return re.sub(r'```[a-zA-Z]*', '', code).strip()

# Generate AI Code
def generate_code(model, query, data, plot_path):
    """
    Generates Python code based on the user's query and the dataset.
    """
    columns = list(data.columns)

    # Get sample data and info as strings
    sample_data = data.sample(5).to_string()
    info_buffer = io.StringIO()
    data.info(buf=info_buffer)
    data_info = info_buffer.getvalue()
    info_buffer.close()

    prompt = f"""
You are a Python data assistant and statistician. The dataset is loaded in a pandas DataFrame named data.
Columns: {', '.join(columns)}.

Here is a sample of the data (first 5 rows):
{sample_data}

Here is the data info (column names, data types, and non-null counts):
{data_info}

 - If there is plotting queries, generate plots and save them to the path {plot_path} without printing any confirmation messages.

- For statistical analysis queries, perform relevant computations (summary statistics, hypothesis tests, regression models, etc.) and output all results using print().

- The generated code must be fully robust and self-contained, which includes:

   - Automatic installation of any missing dependencies (e.g., using pip commands within the code).

   - Comprehensive error handling using try/except blocks to gracefully manage potential issues.

   - Clear and efficient code that runs without requiring any manual modifications.

Generate only valid, executable Python code (no additional text or explanation outside the code, except inline comments).

    Query: {query}
    """

    try:
        response = model.generate_content(prompt)
        code = clean_code(response.text)
        return code, ["pandas", "matplotlib", "plotly", "kaleido"]
    except Exception as e:
        print(f"❌ Error generating code: {e}")
        return f"Error: {e}", []

# Execute AI Code
def execute_code(code, data, dependencies, plot_path):
    """
    Executes the AI-generated code robustly:
    - Saves the dataset to a temporary CSV file.
    - Injects the dataset path into the AI-generated code.
    - Installs dependencies if needed.
    - Executes the code in a subprocess (without Streamlit).
    - Handles stdout/stderr and cleans up temporary files.
    - The calling Streamlit code should detect and display any generated plots.
    """
    import subprocess, sys, os

    temp_csv = "temp_data.csv"
    code_file = "generated_code.py"
    stdout, stderr = "", ""

    try:
        # Save dataset to a temporary CSV file.
        try:
            data.to_csv(temp_csv, index=False)
        except Exception as e:
            return "", f"❌ Error saving temporary CSV: {e}"

        # Prepare the injected code: load the dataset and run the AI code.
        injected_code = f"""
import pandas as pd
import matplotlib.pyplot as plt
import os

# Load the dataset
data = pd.read_csv(r'{temp_csv}')

# --- Begin AI-generated code ---
{code}
# --- End AI-generated code ---

# Save the plot if generated by checking for a current figure.
if plt.get_fignums():
    plt.savefig(r'{plot_path}')
    plt.close()
"""
        # Write the injected code to a temporary file.
        try:
            with open(code_file, "w") as f:
                f.write(injected_code)
        except Exception as e:
            return "", f"❌ Error writing temporary code file: {e}"

        # Install dependencies if needed.
        if dependencies:
            try:
                install_cmd = [sys.executable, "-m", "pip", "install"] + dependencies
                install_proc = subprocess.run(
                    install_cmd, capture_output=True, text=True, check=True
                )
            except subprocess.CalledProcessError as e:
                return "", f"❌ Error installing dependencies: {e.stderr}"

        # Execute the generated code in a subprocess.
        try:
            exec_proc = subprocess.run(
                [sys.executable, code_file],
                capture_output=True,
                text=True,
                check=True
            )
            stdout = exec_proc.stdout.strip()
            stderr = exec_proc.stderr.strip()
        except subprocess.CalledProcessError as e:
            stdout = e.stdout.strip() if e.stdout else ""
            stderr = f"❌ Execution failed: {e.stderr.strip()}"
        except Exception as e:
            return "", f"❌ Unexpected error during execution: {e}"

    finally:
        # Clean up temporary files regardless of success or failure.
        for temp_file in [temp_csv, code_file]:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except Exception:
                    pass

    return stdout, stderr



# Store in Astra DB
def store_in_astra(db, query, code, output):
    """
    Stores the query, AI-generated code, and execution output in Astra DB.
    """
    if db:
        try:
            timestamp = datetime.now().isoformat()
            vector = np.random.random(VECTOR_DIMENSION).astype('float32')
            collection = db.get_collection(COLLECTION_NAME)

            collection.insert_one({
                "query": query,
                "code": code,
                "output": output,
                "timestamp": timestamp
            })
            print("✅ Data stored successfully in Astra DB")
        except Exception as e:
            print(f"❌ Error storing data in Astra DB: {e}")

# Retrieve from Astra DB
def retrieve_from_astra(db):
    """
    Retrieves stored chat history from Astra DB.
    """
    if db:
        try:
            collection = db.get_collection(COLLECTION_NAME)
            return list(collection.find({}))
        except Exception as e:
            print(f"❌ Error retrieving data from Astra DB: {e}")
            return []
    return []

def create_collection(db):
    try:
        if db:
            collections = db.list_collection_names()
            if COLLECTION_NAME not in collections:
                db.create_collection(COLLECTION_NAME)
    except Exception as e:
        print(f"Error creating collection: {e}")
